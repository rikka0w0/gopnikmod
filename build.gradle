buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    // minecraft 'net.minecraftforge:forge:1.15.1-30.0.41'
    minecraft 'net.minecraftforge:forge:1.15.2-31.1.47'

    runtime fileTree(dir: 'libs', include: '*.jar')
}

version = "1.0.0"
group = "su.cheekibreeki" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "gopnikmod"

// Need this here so eclipse task generates correctly.
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    // mappings channel: 'snapshot', version: '20190719-1.14.3'
    mappings channel: 'snapshot', version: '20200225-1.15.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                gopnikmod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                gopnikmod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'gopnikmod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                gopnikmod {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDir "src/main/java"
            srcDir "librikka/src"
        }
        resources {
            srcDir "src/main/resources"
            srcDir "src/generated/resources"
        }
    }
}

jar.classifier = 'full'
jar.version = version

ext.jarFile = zipTree(jar.archivePath)
def libsDir = new File(System.getenv("LIBS_DIR") ?: "build/libs/")
//jar.excludes.addAll(["rikka/**"])

task deobfJar(type: Jar, dependsOn: 'jar') {
    from(sourceSets.main.output) {
    	excludes.addAll(["rikka/**"])
    }
    destinationDir = libsDir
    classifier = 'dev'
}

task standaloneJar(type: Jar, dependsOn: 'reobfJar') {
    from(project.ext.jarFile) {
    	excludes.addAll(["rikka/**"])
    }
    destinationDir = libsDir
}

task deobfJar_librikka(type: Jar, dependsOn: 'jar') {
	from(sourceSets.main.output) {
		includes.addAll(["rikka/**"])
	}
	destinationDir = libsDir
	archiveName  = 'librikka-dev.jar'
}

task reobfJar_librikka(type: Jar, dependsOn: 'reobfJar') {
	from(project.ext.jarFile) {
		includes.addAll(["rikka/**"])
	}
	destinationDir = libsDir
	archiveName  = 'librikka.jar'
}

artifacts {
    archives deobfJar
    archives standaloneJar
    archives deobfJar_librikka
    archives reobfJar_librikka
}
